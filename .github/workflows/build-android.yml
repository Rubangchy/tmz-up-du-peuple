name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          libssl-dev \
          libffi-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake

    - name: Install Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer
        pip install kivy[base]
        pip install cython

    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}

    - name: Cache buildozer directory in project
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-project-${{ hashFiles('buildozer.spec') }}

    - name: Create simple patch script
      run: |
        cat > apply_patches.sh << 'EOF'
        #!/bin/bash
        echo "Applying compatibility patches..."
        
        # Créer un marqueur pour éviter les double-patches
        PATCH_MARKER=".buildozer/.patches_applied_$(date +%s)"
        
        # Compter les fichiers trouvés
        PXI_COUNT=$(find .buildozer -name "*.pxi" 2>/dev/null | wc -l)
        PYX_COUNT=$(find .buildozer -name "*.pyx" 2>/dev/null | wc -l)
        PXD_COUNT=$(find .buildozer -name "*.pxd" 2>/dev/null | wc -l)
        
        echo "Found $PXI_COUNT .pxi files, $PYX_COUNT .pyx files, $PXD_COUNT .pxd files"
        
        if [ $PXI_COUNT -gt 0 ] || [ $PYX_COUNT -gt 0 ] || [ $PXD_COUNT -gt 0 ]; then
            # Fix .pxi files
            find .buildozer -name "*.pxi" -exec sed -i 's/isinstance(arg, long)/isinstance(arg, int)/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pxi" -exec sed -i 's/, long)/, int)/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pxi" -exec sed -i 's/(long/(int/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pxi" -exec sed -i 's/long: /int: /g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pxi" -exec sed -i "s/long: '/int: '/g" {} \; 2>/dev/null || true
            find .buildozer -name "*.pxi" -exec sed -i 's/tp == long/tp == int/g' {} \; 2>/dev/null || true
            
            # Fix .pyx files (protection contre long long long long)
            find .buildozer -name "*.pyx" -exec sed -i 's/(long, int)/(int, int)/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pyx" -exec sed -i 's/= long(/= int(/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pyx" -exec sed -i 's/def long(self):/def __int__(self):/g' {} \; 2>/dev/null || true
            find .buildozer -name "*.pyx" -exec sed -i 's/return long(/return int(/g' {} \; 2>/dev/null || true
            
            # Pour cdef long, remplacer seulement si ce n'est pas déjà long long
            find .buildozer -name "*.pyx" -exec sh -c '
                if grep -q "cdef long " "$1" && ! grep -q "cdef long long" "$1"; then
                    sed -i "s/cdef long /cdef long long /g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "*.pyx" -exec sh -c '
                if grep -q "__init__(self, long " "$1" && ! grep -q "__init__(self, long long" "$1"; then
                    sed -i "s/__init__(self, long /__init__(self, long long /g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "*.pyx" -exec sh -c '
                if grep -q "cdef void grow(self, long " "$1" && ! grep -q "cdef void grow(self, long long" "$1"; then
                    sed -i "s/cdef void grow(self, long /cdef void grow(self, long long /g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            # Fix .pxd files
            find .buildozer -name "*.pxd" -exec sh -c '
                if grep -q "cdef long size" "$1" && ! grep -q "cdef long long size" "$1"; then
                    sed -i "s/cdef long size/cdef long long size/g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "*.pxd" -exec sh -c '
                if grep -q "cdef void grow(self, long" "$1" && ! grep -q "cdef void grow(self, long long" "$1"; then
                    sed -i "s/cdef void grow(self, long/cdef void grow(self, long long/g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "*.pxd" -exec sh -c '
                if grep -q "cdef long block_size" "$1" && ! grep -q "cdef long long block_size" "$1"; then
                    sed -i "s/cdef long block_size/cdef long long block_size/g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "*.pxd" -exec sh -c '
                if grep -q "cdef long block_count" "$1" && ! grep -q "cdef long long block_count" "$1"; then
                    sed -i "s/cdef long block_count/cdef long long block_count/g" "$1"
                fi
            ' sh {} \; 2>/dev/null || true
            
            # Fix noexcept issues
            find .buildozer -name "_gstplayer.pyx" -exec sh -c '
                if [ -f "$1" ]; then
                    if grep -q ") with gil:" "$1" && ! grep -q ") noexcept with gil:" "$1"; then
                        sed -i "s/) with gil:/) noexcept with gil:/g" "$1"
                    fi
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "_window_sdl2.pyx" -exec sh -c '
                if [ -f "$1" ]; then
                    if grep -q ") with gil:" "$1" && ! grep -q ") noexcept with gil:" "$1"; then
                        sed -i "s/) with gil:/) noexcept with gil:/g" "$1"
                    fi
                    if grep -q "cpdef SDL_WindowShapeMode" "$1"; then
                        sed -i "s/cpdef SDL_WindowShapeMode/cdef SDL_WindowShapeMode/g" "$1"
                    fi
                fi
            ' sh {} \; 2>/dev/null || true
            
            find .buildozer -name "_img_sdl2.pyx" -exec sh -c '
                if [ -f "$1" ]; then
                    # Ajouter noexcept seulement si pas déjà présent
                    if ! grep -q "noexcept" "$1"; then
                        sed -i "s/long (* seek) (SDL_RWops \* context, long offset,int whence)/long (* seek) (SDL_RWops * context, long offset,int whence) noexcept/g" "$1"
                        sed -i "s/size_t(* read) ( SDL_RWops \* context, void \*ptr, size_t size, size_t maxnum)/size_t(* read) ( SDL_RWops * context, void *ptr, size_t size, size_t maxnum) noexcept/g" "$1"
                        sed -i "s/size_t(* write) (SDL_RWops \* context, void \*ptr,size_t size, size_t num)/size_t(* write) (SDL_RWops * context, void *ptr,size_t size, size_t num) noexcept/g" "$1"
                        sed -i "s/int (* close) (SDL_RWops \* context)/int (* close) (SDL_RWops * context) noexcept/g" "$1"
                        sed -i "s/size_t size, size_t num):$/size_t size, size_t num) noexcept:/g" "$1"
                        sed -i "s/cdef int rwops_bytesio_close(SDL_RWops \*context):/cdef int rwops_bytesio_close(SDL_RWops *context) noexcept:/g" "$1"
                        sed -i "s/cdef SDL_RWops \*rwops_bridge_to_bytesio(byteio):/cdef SDL_RWops *rwops_bridge_to_bytesio(byteio) noexcept:/g" "$1"
                    fi
                fi
            ' sh {} \; 2>/dev/null || true
            
            echo "Patches completed!"
        else
            echo "No Cython files found to patch"
        fi
        EOF
        chmod +x apply_patches.sh

    - name: Initial buildozer setup
      run: |
        # Initialiser buildozer et télécharger les dépendances
        buildozer android update || true
        # Premier round de patches
        ./apply_patches.sh

    - name: Build APK with strategic patching
      run: |
        cat > build_with_strategic_patches.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting buildozer with strategic patching..."
        
        # Lancer buildozer en arrière-plan
        timeout 3600 buildozer android debug &
        BUILD_PID=$!
        
        # Surveiller et patcher quand de nouveaux fichiers apparaissent
        LAST_FILE_COUNT=0
        while kill -0 $BUILD_PID 2>/dev/null; do
            sleep 20
            
            # Compter les fichiers Cython actuels
            CURRENT_FILE_COUNT=$(find .buildozer -name "*.pyx" -o -name "*.pxi" -o -name "*.pxd" 2>/dev/null | wc -l)
            
            # Si de nouveaux fichiers sont apparus, appliquer les patches
            if [ $CURRENT_FILE_COUNT -gt $LAST_FILE_COUNT ]; then
                echo "New Cython files detected ($CURRENT_FILE_COUNT vs $LAST_FILE_COUNT) - applying patches..."
                ./apply_patches.sh
                LAST_FILE_COUNT=$CURRENT_FILE_COUNT
            fi
        done
        
        # Attendre la fin de buildozer
        wait $BUILD_PID
        BUILD_EXIT_CODE=$?
        
        # Patch final pour être sûr
        echo "Final patch application..."
        ./apply_patches.sh
        
        echo "Build completed with exit code: $BUILD_EXIT_CODE"
        exit $BUILD_EXIT_CODE
        EOF
        
        chmod +x build_with_strategic_patches.sh
        ./build_with_strategic_patches.sh

    - name: List generated files
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        echo "Searching for APK files:"
        find . -name "*.apk" -type f || echo "No APK files found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk

    - name: Upload to releases (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}