name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          libssl-dev \
          libffi-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake

    - name: Install Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer
        pip install kivy[base]
        pip install cython

    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}

    - name: Cache buildozer directory in project
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-project-${{ hashFiles('buildozer.spec') }}

    - name: Fix pyjnius long type compatibility
      run: |
        # Wait for buildozer to download python-for-android, then fix the files
        buildozer android update || true
        # Fix .pxi files
        find .buildozer -name "*.pxi" -exec sed -i 's/isinstance(arg, long)/isinstance(arg, int)/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/, long)/, int)/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/(long/(int/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/long: /int: /g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i "s/long: '/int: '/g" {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/tp == long/tp == int/g' {} \;
        # Fix .pyx files
        find .buildozer -name "*.pyx" -exec sed -i 's/(long, int)/(int, int)/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef long/cdef long long/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/= long(/= int(/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/def long(self):/def __int__(self):/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/return long(/return int(/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef long long size/cdef long long size/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/__init__(self, long/__init__(self, long long/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef void grow(self, long /cdef void grow(self, long long /g' {} \;
        # Fix .pxd files  
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long size/cdef long long size/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef void grow(self, long/cdef void grow(self, long long/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long block_size/cdef long long block_size/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long block_count/cdef long long block_count/g' {} \;
        # Fix noexcept issues in specific files
        find .buildozer -name "_gstplayer.pyx" -exec sed -i 's/char \*data, int datasize) with gil:/char *data, int datasize) noexcept with gil:/g' {} \;
        find .buildozer -name "_gstplayer.pyx" -exec sed -i 's/void \*c_player, GstMessage \*message) with gil:/void *c_player, GstMessage *message) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/userdata, SDL_Event \*event) with gil:/userdata, SDL_Event *event) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/const SDL_Point\* pts, void\* data) with gil:/const SDL_Point* pts, void* data) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/cpdef SDL_WindowShapeMode sdl_window_mode/cdef SDL_WindowShapeMode sdl_window_mode/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/long (\* seek) (SDL_RWops \* context, long offset,int whence)/long (* seek) (SDL_RWops * context, long offset,int whence) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t(\* read) ( SDL_RWops \* context, void \*ptr, size_t size, size_t maxnum)/size_t(* read) ( SDL_RWops * context, void *ptr, size_t size, size_t maxnum) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t(\* write) (SDL_RWops \* context, void \*ptr,size_t size, size_t num)/size_t(* write) (SDL_RWops * context, void *ptr,size_t size, size_t num) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/int (\* close) (SDL_RWops \* context)/int (* close) (SDL_RWops * context) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t size, size_t num):$/size_t size, size_t num) noexcept:/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/cdef int rwops_bytesio_close(SDL_RWops \*context):/cdef int rwops_bytesio_close(SDL_RWops *context) noexcept:/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/cdef SDL_RWops \*rwops_bridge_to_bytesio(byteio):/cdef SDL_RWops *rwops_bridge_to_bytesio(byteio) noexcept:/g' {} \;


    - name: Create patch script
      run: |
        cat > apply_patches.sh << 'EOF'
        #!/bin/bash
        echo "Applying compatibility patches..."
        # Fix .pxi files
        find .buildozer -name "*.pxi" -exec sed -i 's/isinstance(arg, long)/isinstance(arg, int)/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/, long)/, int)/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/(long/(int/g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/long: /int: /g' {} \;
        find .buildozer -name "*.pxi" -exec sed -i "s/long: '/int: '/g" {} \;
        find .buildozer -name "*.pxi" -exec sed -i 's/tp == long/tp == int/g' {} \;
        # Fix .pyx files
        find .buildozer -name "*.pyx" -exec sed -i 's/(long, int)/(int, int)/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef long/cdef long long/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/= long(/= int(/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/def long(self):/def __int__(self):/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/return long(/return int(/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef long long size/cdef long long size/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/__init__(self, long/__init__(self, long long/g' {} \;
        find .buildozer -name "*.pyx" -exec sed -i 's/cdef void grow(self, long /cdef void grow(self, long long /g' {} \;
        # Fix .pxd files  
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long size/cdef long long size/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef void grow(self, long/cdef void grow(self, long long/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long block_size/cdef long long block_size/g' {} \;
        find .buildozer -name "*.pxd" -exec sed -i 's/cdef long block_count/cdef long long block_count/g' {} \;
        # Fix noexcept issues
        find .buildozer -name "_gstplayer.pyx" -exec sed -i 's/char \*data, int datasize) with gil:/char *data, int datasize) noexcept with gil:/g' {} \;
        find .buildozer -name "_gstplayer.pyx" -exec sed -i 's/void \*c_player, GstMessage \*message) with gil:/void *c_player, GstMessage *message) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/userdata, SDL_Event \*event) with gil:/userdata, SDL_Event *event) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/const SDL_Point\* pts, void\* data) with gil:/const SDL_Point* pts, void* data) noexcept with gil:/g' {} \;
        find .buildozer -name "_window_sdl2.pyx" -exec sed -i 's/cpdef SDL_WindowShapeMode sdl_window_mode/cdef SDL_WindowShapeMode sdl_window_mode/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/long (\* seek) (SDL_RWops \* context, long offset,int whence)/long (* seek) (SDL_RWops * context, long offset,int whence) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t(\* read) ( SDL_RWops \* context, void \*ptr, size_t size, size_t maxnum)/size_t(* read) ( SDL_RWops * context, void *ptr, size_t size, size_t maxnum) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t(\* write) (SDL_RWops \* context, void \*ptr,size_t size, size_t num)/size_t(* write) (SDL_RWops * context, void *ptr,size_t size, size_t num) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/int (\* close) (SDL_RWops \* context)/int (* close) (SDL_RWops * context) noexcept/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/size_t size, size_t num):$/size_t size, size_t num) noexcept:/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/cdef int rwops_bytesio_close(SDL_RWops \*context):/cdef int rwops_bytesio_close(SDL_RWops *context) noexcept:/g' {} \;
        find .buildozer -name "_img_sdl2.pyx" -exec sed -i 's/cdef SDL_RWops \*rwops_bridge_to_bytesio(byteio):/cdef SDL_RWops *rwops_bridge_to_bytesio(byteio) noexcept:/g' {} \;
        echo "Patches applied!"
        EOF
        chmod +x apply_patches.sh
    
    - name: Build APK with Buildozer (with continuous patching)
      run: |
        # Script pour appliquer les patches en continu pendant la compilation
        cat > build_with_patches.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Fonction pour appliquer les patches
        apply_patches() {
            ./apply_patches.sh
        }
        
        # Appliquer les patches initiaux
        apply_patches
        
        # Lancer buildozer en arrière-plan
        buildozer android debug &
        BUILD_PID=$!
        
        # Surveiller et appliquer les patches toutes les 30 secondes
        while kill -0 $BUILD_PID 2>/dev/null; do
            sleep 30
            echo "Applying patches during build..."
            apply_patches
        done
        
        # Attendre la fin du processus buildozer
        wait $BUILD_PID
        BUILD_EXIT_CODE=$?
        
        # Appliquer les patches une dernière fois
        apply_patches
        
        exit $BUILD_EXIT_CODE
        EOF
        
        chmod +x build_with_patches.sh
        ./build_with_patches.sh

    - name: List generated files
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        echo "Searching for APK files:"
        find . -name "*.apk" -type f || echo "No APK files found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk

    - name: Upload to releases (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
